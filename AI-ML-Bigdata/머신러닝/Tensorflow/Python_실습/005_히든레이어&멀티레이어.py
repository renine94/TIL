# -*- coding: utf-8 -*-
"""005_히든레이어&멀티레이어.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cbBVCa1KJzt1hxecYxRKAzN5p72dRGaK

# 히든레이어
- 보스턴: https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/boston.csv

- 아이리스: https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/iris.csv
"""

# 라이브러리 사용
 import tensorflow as tf
 import pandas as pd

"""## 보스턴 집값 예측"""

# 1. 과거의 데이터를 준비합니다.
보스턴 = pd.read_csv('https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/boston.csv')
보스턴.head()

# 보스턴DataSet의 Columns 추출
보스턴.columns

# 독립변수, 종속변수
독립 = 보스턴[['crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis', 'rad', 'tax',
              'ptratio', 'b', 'lstat']]
종속 = 보스턴[['medv']]
print(독립.shape, 종속.shape)

# 2. 모델의 구조를 만듭니다.
X = tf.keras.layers.Input(shape=[13])
H = tf.keras.layers.Dense(10, activation='swish')(X) # 히든레이어추가, 10개의 노드추가, 활성화함수 swish
Y = tf.keras.layers.Dense(1)(H)
model = tf.keras.models.Model(X, Y)
model.compile(loss='mse')

model.summary()

# 3. 데이터로 모델을 학습(Fit) 합니다.
# 멀티레이어로 학습한 상태
model.fit(독립, 종속, epochs=1000, verbose=0) # verbose 출력결과 안나타냄
model.fit(독립, 종속, epochs=10)

# 4. 모델을 이용합니다.
print(model.predict(독립[:5]))
print(종속[:5])

"""## 아이리스 품종 분류"""

# 1. 과거의 데이터를 준비한다.
아이리스 = pd.read_csv('https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/iris.csv')
print(아이리스.head())

# 원핫인코딩
아이리스 = pd.get_dummies(아이리스)
print(아이리스.head())

# 독립, 종속
독립 = 아이리스[['꽃잎길이', '꽃잎폭', '꽃받침길이', '꽃받침폭']]
종속 = 아이리스[['품종_setosa', '품종_versicolor','품종_virginica']]
print(독립.shape, 종속.shape)

# 2. 모델의 구조를 만듭니다.
X = tf.keras.layers.Input(shape=[4])
H = tf.keras.layers.Dense(8, activation='swish')(X) # 히든레이어, 활성함수: swish
H = tf.keras.layers.Dense(8, activation='swish')(H) 
H = tf.keras.layers.Dense(8, activation='swish')(H)
Y = tf.keras.layers.Dense(3, activation='softmax')(H)
model = tf.keras.models.Model(X, Y)
model.compile(loss='categorical_crossentropy',
              metrics='accuracy')

# 3. 데이터로 모델을 학습(Fit)합니다.
model.fit(독립, 종속, epochs=1000, verbose=0)
model.fit(독립, 종속, epochs=10)

# 4. 모델을 이용합니다.
print(model.predict(독립[:5]))
print('--------------------------------------------------')
print(종속[:5])